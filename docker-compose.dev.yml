services:
  # Application service with hot reload
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: modular-monolith-dev
    ports:
      - "8080:8080"
    volumes:
      # Mount source code for hot reload
      - .:/app
      # Cache Go modules
      - go-mod-cache:/go/pkg/mod
      # Exclude tmp directory to avoid conflicts
      - /app/tmp
    env_file:
      - docker.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - modular-monolith-network
    restart: unless-stopped

  # PostgreSQL database service
  postgres:
    image: postgres:15-alpine
    container_name: modular-monolith-postgres-dev
    ports:
      - "5433:5432"
    env_file:
      - docker.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Initialize databases
      - ./docker/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - modular-monolith-network
    restart: unless-stopped

  # Migration service (run once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: modular-monolith-migrate-dev
    volumes:
      - .:/app
      - go-mod-cache:/go/pkg/mod
    env_file:
      - docker.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - modular-monolith-network
    command: ["go", "run", "cmd/migrate/main.go", "-module=all", "-action=up"]
    profiles:
      - migrate

volumes:
  postgres-data:
    driver: local
  go-mod-cache:
    driver: local

networks:
  modular-monolith-network:
    driver: bridge 